/**
 * Type definitions for YouTube API integration
 */

// Base API response structure
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

// YouTube Video Types
export interface YouTubeVideoDetails {
  id: string;
  title: string;
  description: string;
  thumbnail: string;
  duration: number;
  channel: YouTubeChannelSummary;
  stats: YouTubeVideoStats;
  publishedAt: string;
  category: string;
  tags: string[];
  language?: string;
  captions?: YouTubeCaptions[];
}

export interface YouTubeVideoStats {
  views: number;
  likes: number;
  comments: number;
  shares?: number;
}

export interface YouTubeCaptions {
  language: string;
  languageCode: string;
  url: string;
  autoGenerated: boolean;
}

// YouTube Channel Types
export interface YouTubeChannel {
  id: string;
  name: string;
  description: string;
  thumbnail: string;
  banner: string;
  verified: boolean;
  stats: YouTubeChannelStats;
  joinedAt: string;
  country: string;
  customUrl?: string;
  keywords?: string[];
}

export interface YouTubeChannelSummary {
  name: string;
  id: string;
  thumbnail: string;
  verified: boolean;
  subscriberCount?: number;
}

export interface YouTubeChannelStats {
  subscribers: number;
  videos: number;
  views: number;
  averageViews?: number;
  engagementRate?: number;
}

// YouTube Playlist Types
export interface YouTubePlaylist {
  id: string;
  title: string;
  description: string;
  thumbnail: string;
  channel: YouTubeChannelSummary;
  stats: YouTubePlaylistStats;
  videos: YouTubePlaylistItem[];
  privacy: 'public' | 'unlisted' | 'private';
  createdAt?: string;
  updatedAt?: string;
}

export interface YouTubePlaylistStats {
  videoCount: number;
  views: number;
  totalDuration?: number;
}

export interface YouTubePlaylistItem {
  id: string;
  title: string;
  thumbnail: string;
  duration: number;
  channel: string;
  position: number;
  addedAt?: string;
  unavailable?: boolean;
}

// YouTube Download Types
export interface YouTubeDownloadStream {
  quality: string;
  format: string;
  url: string;
  size?: string;
  fps?: number;
  codec?: string;
  hasAudio: boolean;
  hasVideo: boolean;
  bitrate?: number;
  audioCodec?: string;
  videoCodec?: string;
  container?: string;
  mimeType?: string;
  adaptive?: boolean;
}

export interface YouTubeDownloadOptions {
  videoId: string;
  format: 'video' | 'audio' | 'all';
  quality?: string;
  maxQuality?: string;
  preferredCodec?: string;
  includeSubtitles?: boolean;
}

export interface YouTubeDownloadInfo {
  video: YouTubeVideoDetails;
  streams: YouTubeDownloadStream[];
  summary: {
    total: number;
    video: number;
    audio: number;
    qualities: string[];
    formats: string[];
  };
  recommendations?: YouTubeDownloadStream[];
}

// YouTube Search Types
export interface YouTubeSearchQuery {
  query: string;
  type?: 'video' | 'playlist' | 'channel';
  duration?: 'short' | 'medium' | 'long';
  quality?: 'low' | 'high';
  sortBy?: 'relevance' | 'date' | 'views' | 'rating';
  limit?: number;
  offset?: number;
}

export interface YouTubeSearchResult {
  query: string;
  results: YouTubeVideoDetails[];
  meta: {
    total: number;
    limit: number;
    offset: number;
    hasMore: boolean;
  };
  suggestions?: string[];
}

// Error Types
export interface YouTubeApiError {
  code: string;
  message: string;
  details?: any;
  retryable: boolean;
  timestamp: string;
}

export type YouTubeErrorType = 
  | 'validation'
  | 'rate_limit'
  | 'permission'
  | 'not_found'
  | 'config'
  | 'network'
  | 'unknown';

// Hook Types
export interface UseYouTubeState {
  loading: boolean;
  error: string | null;
  videoDetails: YouTubeVideoDetails | null;
  downloadStreams: YouTubeDownloadStream[];
  playlist: YouTubePlaylist | null;
  channel: YouTubeChannel | null;
  searchResults: YouTubeVideoDetails[];
}

export interface UseYouTubeActions {
  getVideoDetails: (url: string) => Promise<void>;
  getDownloadStreams: (url: string, format?: 'video' | 'audio' | 'all') => Promise<void>;
  getPlaylist: (url: string) => Promise<void>;
  getChannelInfo: (url: string) => Promise<void>;
  searchVideos: (query: string, limit?: number) => Promise<void>;
  clearError: () => void;
  reset: () => void;
}

export type UseYouTubeReturn = UseYouTubeState & UseYouTubeActions;

// Component Props Types
export interface VideoCardProps {
  video: YouTubeVideoDetails;
  onDownload?: (video: YouTubeVideoDetails) => void;
  onViewDetails?: (video: YouTubeVideoDetails) => void;
  showStats?: boolean;
  className?: string;
}

export interface DownloadStreamItemProps {
  stream: YouTubeDownloadStream;
  onDownload: (stream: YouTubeDownloadStream) => void;
  isRecommended?: boolean;
  className?: string;
}

export interface PlaylistCardProps {
  playlist: YouTubePlaylist;
  onViewPlaylist?: (playlist: YouTubePlaylist) => void;
  onDownloadAll?: (playlist: YouTubePlaylist) => void;
  showStats?: boolean;
  className?: string;
}

export interface ChannelCardProps {
  channel: YouTubeChannel;
  onViewChannel?: (channel: YouTubeChannel) => void;
  showStats?: boolean;
  className?: string;
}

// Utility Types
export interface URLExtractionResult {
  type: 'video' | 'playlist' | 'channel' | 'search' | 'unknown';
  id: string | null;
  originalUrl: string;
  cleanUrl?: string;
}

export interface QualityInfo {
  resolution: string;
  fps: number;
  bitrate: number;
  codec: string;
  priority: number;
}

export interface FormatInfo {
  container: string;
  extension: string;
  mimeType: string;
  description: string;
  supported: boolean;
}

// Configuration Types
export interface YouTubeApiConfig {
  apiKey: string;
  apiHost: string;
  timeout: number;
  retryAttempts: number;
  retryDelay: number;
  rateLimit: {
    requests: number;
    window: number; // in milliseconds
  };
}

export interface DownloadPreferences {
  preferredQuality: string;
  preferredFormat: string;
  preferredCodec: string;
  autoDownload: boolean;
  downloadLocation: string;
  includeSubtitles: boolean;
  includeMetadata: boolean;
}

// Analytics Types
export interface YouTubeAnalytics {
  downloads: {
    total: number;
    byFormat: Record<string, number>;
    byQuality: Record<string, number>;
    byDate: Record<string, number>;
  };
  searches: {
    total: number;
    queries: string[];
    popularTerms: Record<string, number>;
  };
  errors: {
    total: number;
    byType: Record<YouTubeErrorType, number>;
    recent: YouTubeApiError[];
  };
}

// Export all types
export type {
  // Main types are already exported above
};

// Default values and constants
export const DEFAULT_YOUTUBE_CONFIG: YouTubeApiConfig = {
  apiKey: '',
  apiHost: 'youtube-video-and-shorts-downloader.p.rapidapi.com',
  timeout: 30000,
  retryAttempts: 3,
  retryDelay: 1000,
  rateLimit: {
    requests: 100,
    window: 60000, // 1 minute
  },
};

export const DEFAULT_DOWNLOAD_PREFERENCES: DownloadPreferences = {
  preferredQuality: '1080p',
  preferredFormat: 'mp4',
  preferredCodec: 'h264',
  autoDownload: false,
  downloadLocation: '/downloads',
  includeSubtitles: false,
  includeMetadata: true,
};

export const YOUTUBE_URL_PATTERNS = {
  video: [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/|m\.youtube\.com\/watch\?v=|youtube\.com\/shorts\/)([a-zA-Z0-9_-]{11})/,
    /^[a-zA-Z0-9_-]{11}$/
  ],
  playlist: [
    /[&?]list=([a-zA-Z0-9_-]+)/,
    /^[a-zA-Z0-9_-]+$/
  ],
  channel: [
    /youtube\.com\/channel\/([a-zA-Z0-9_-]+)/,
    /youtube\.com\/@([a-zA-Z0-9_.-]+)/,
    /youtube\.com\/c\/([a-zA-Z0-9_-]+)/,
    /youtube\.com\/user\/([a-zA-Z0-9_-]+)/,
  ],
};

export const QUALITY_PRIORITIES: Record<string, number> = {
  '2160p': 1, '4K': 1,
  '1440p': 2, '2K': 2,
  '1080p': 3, 'Full HD': 3,
  '720p': 4, 'HD': 4,
  '480p': 5,
  '360p': 6,
  '240p': 7,
  '144p': 8,
  'Audio': 10,
  '320kbps': 11,
  '256kbps': 12,
  '192kbps': 13,
  '128kbps': 14,
  '96kbps': 15,
  '64kbps': 16,
};

export const SUPPORTED_FORMATS = [
  { format: 'mp4', description: 'MP4 Video', type: 'video' },
  { format: 'webm', description: 'WebM Video', type: 'video' },
  { format: 'mp3', description: 'MP3 Audio', type: 'audio' },
  { format: 'm4a', description: 'M4A Audio', type: 'audio' },
  { format: 'ogg', description: 'OGG Audio', type: 'audio' },
];

export default {
  DEFAULT_YOUTUBE_CONFIG,
  DEFAULT_DOWNLOAD_PREFERENCES,
  YOUTUBE_URL_PATTERNS,
  QUALITY_PRIORITIES,
  SUPPORTED_FORMATS,
};
